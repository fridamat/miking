// Miking is licensed under the MIT license.
// Copyright (C) David Broman. See file LICENSE.txt
//
// Test of control structions, including functions

lang mcore


// IF-expressions. Note that the branches must be wrapped into a thunk
utest 10 (if true then 10 else 20)
utest 20 (if false then 10 else 20)
utest 30 (if (or false true) then (addi 10 20) else (subi 20 10))
utest 10 (if (and false true) then (addi 10 20) else (subi 20 10))

// Debug strings
utest "10" (dstr 10)
utest "Seq('Y','e','s')" (dstr "Yes")

// lambdas
utest 40 ((lam x:Int. lam y:Int. muli x y) 4 10)

// let
let x = 10
let foo = lam x:Int->Int. lam y:Int. x y
let double = lam x:Int. muli x 2
utest 20 (foo double x)

// Collection types
utest "testthis" (concat "test" "this")

// argv
utest "" (argv nop)


// Functions with fix point
let pow = fix (lam pow:(Int->Int->Int). lam x:Int. lam n:Int.
           if (leqi n 1) then
              (x)
           else
              (muli x (pow x (subi n 1)))
           )

utest 16 (pow 2 4)
utest 59049 (pow 3 10)
