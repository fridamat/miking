lang mcore

// is_empty
utest true (seqmethod.is_empty (newseq [int] ()))
utest false (seqmethod.is_empty (newseq [int] (1)))

// first
utest 1 (seqmethod.first (newseq [int] (1)))
utest 1 (seqmethod.first (newseq [int] (1,2)))

// last
utest 1 (seqmethod.last (newseq [int] (1)))
utest 2 (seqmethod.last (newseq [int] (1,2)))

// push
utest (newseq [int] (1)) (seqmethod.push (newseq [int] ()) 1)
utest (newseq [int] (1,2,3)) (seqmethod.push (newseq [int] (2,3)) 1)

// pop
utest (newseq [int] ()) (seqmethod.pop (newseq [int] (1)))
utest (newseq [int] (1,2,3)) (seqmethod.pop (newseq [int] (0,1,2,3)))

// length
utest 0 (seqmethod.length (newseq [int] ()))
utest 2 (seqmethod.length (newseq [int] (1,2)))

// nth
utest 1 (seqmethod.nth (newseq [int] (1,2,3)) 0)
utest 2 (seqmethod.nth (newseq [int] (1,2,3)) 1)
utest 3 (seqmethod.nth (newseq [int] (1,2,3)) 2)

// append
utest (newseq [int] (1,2,3)) (seqmethod.append (newseq [int] (1)) (newseq [int] (2,3)))
utest (newseq [int] (1,2,3)) (seqmethod.append (newseq [int] ()) (newseq [int] (1,2,3)))

// reverse
utest (newseq [int] (3,2,1)) (seqmethod.reverse (newseq [int] (1,2,3)))

// push_last
utest (newseq [int] (1,2,3)) (seqmethod.push_last (newseq [int] (1,2)) 3)

// pop_last
utest (newseq [int] (1,2,3)) (seqmethod.pop_last (newseq [int] (1,2,3,4)))

// take
utest (newseq [int] (1,2)) (seqmethod.take (newseq [int] (1,2,3)) 2)

// drop
utest (newseq [int] (2,3)) (seqmethod.drop (newseq [int] (1,2,3)) 1)
