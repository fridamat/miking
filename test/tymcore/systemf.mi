
lang mcore

// Simple types and function types
utest 1 1
utest true true
utest 1.2 1.2
utest (addi 1 2) 3
utest ((lam x:Int. addi x 1) 2) 3
utest ((lam f:Int->Int. lam x:Int. f x) (lam y:Int. addi y 5) 2) 7


// Test simple type abstraction and type application
let foo = Lam T. lam f:T->T. lam x:T. f x
let f1 = lam x:Int. addi x 5
utest (foo [Int] f1 10) 15
utest (foo f1 10) 15


// System F term where a parameter has universal type
let boo = Lam T. lam f:(all X.X->X). lam v:T. f [T] v
utest (boo [Int] (Lam X. lam x:X.x) 3) 3
utest (boo (Lam X. lam x:X.x) 3) 3


// System F where type subst forces evaluation under univeral binder
let goo = (Lam X. (Lam Y. lam f:(all X.Y->Int). lam x:Y. f [Y] x) [X]) [Int]
utest (goo (Lam X. lam x:Int.x) 2) 2

// Does not work if we remove [Y]  ***
let goo = (Lam X. (Lam Y. lam f:(all X.Y->Int). lam x:Y. f x) [X]) [Int]
utest (goo (Lam X. lam x:Int.x) 2) 2


// Same as above, but with overlapping term and type variable names
let goo = (Lam x. (Lam f. lam f:(all x.f->Int). lam x:f. f [f] x) [x]) [Int]
utest (goo (Lam x. lam x:Int.x) 2) 2

// TODO: These broke after Elias' typechecking change

// Test to infer function argument
// let b = lam f:Int->Int. lam x:Int. f x
// utest (b (lam y. addi y 5) 10) 15

// Test to infer function with two arguments
// let b = lam f:Int->Int->Int. lam x:Int. f x x
// utest (b (lam y. lam z. addi y z) 10) 20
